---
description: 
globs: 
alwaysApply: true
---

You are a senior TypeScript programmer with experience in the NestJS framework and a preference for clean programming and design patterns.

Generate code, corrections, and refactorings that comply with the basic principles and nomenclature.

## Core Architecture 
- **Framework**: NestJS with TypeScript 
- **Package Manager**: pnpm 
- **Database**: PostgreSQL with Prisma ORM 
- **Authentication**: Better Auth with organization plugin 
- **API Documentation**: Swagger/OpenAPI decorators 

## Database Models (schema.prisma) 

### User Management 
- `User` - Core user entity with auth fields 
- `Session` - User sessions with organization context 
- `Account` - SSO account linking 
- `Verification` - Email/identity verification 

### Organization Management 
- `Organization` - Multi-tenant organizations with company details 
- `Member` - User-organization relationships with roles 
- `Invitation` - Pending organization invitations 
- `Team` - Sub-organization teams 

## Module Structure 

### Common Entities (common/entities/) 
```
common/
â””â”€â”€ entities/
    â”œâ”€â”€ user.entity.ts          # User entity interface 
    â”œâ”€â”€ session.entity.ts       # Session entity interface 
    â”œâ”€â”€ account.entity.ts       # Account entity interface 
    â”œâ”€â”€ verification.entity.ts  # Verification entity interface 
    â”œâ”€â”€ organization.entity.ts  # Organization entity interface 
    â”œâ”€â”€ member.entity.ts        # Member entity interface 
    â”œâ”€â”€ invitation.entity.ts    # Invitation entity interface 
    â”œâ”€â”€ team.entity.ts          # Team entity interface 
    â””â”€â”€ index.ts               # Barrel exports 
```

### Auth Module 
```
modules/auth/
â”œâ”€â”€ auth-client.ts              # Better Auth client configuration 
â”œâ”€â”€ auth.service.ts            # Auth business logic 
â”œâ”€â”€ auth.controller.ts         # Better Auth integration 
â””â”€â”€ auth.module.ts             # Module configuration 

common/
â”œâ”€â”€ decorators/
â”‚   â”œâ”€â”€ current-user.decorator.ts      # User extraction decorator 
â”‚   â””â”€â”€ require-permissions.decorator.ts # Permission decorator 
â””â”€â”€ guards/
    â”œâ”€â”€ auth.guard.ts          # Authentication guard 
    â””â”€â”€ permission.guard.ts    # Permission-based access control 
```

## Common/Shared Components 

### Types & DTOs 
- Pagination responses and utilities 
- Common response interfaces (`ApiResponseDto`) 
- Entity interfaces in `common/entities/` 
- Input DTOs using entity interfaces with validation 
- Output DTOs using TypeScript `Pick`, `Omit`, and utility types from entities 


### Decorators 
- `@CurrentUser` - Extract authenticated user from request 
- `@RequirePermissions` - Role-based access control 

### Guards 
- `AuthGuard` - Authentication verification 
- `PermissionGuard` - Organization/role permission checks 

### Utilities 
```
common/utilities/
â”œâ”€â”€ slug.util.ts              # URL slug generation 
â”œâ”€â”€ validation.util.ts        # Validation helpers 
â””â”€â”€ index.ts                 # Barrel exports 
```

### Interceptors 
```
common/interceptors/
â””â”€â”€ transform.interceptor.ts   # Response transformation 
```

### Validation 
- Class-validator for input DTOs 
- Swagger decorators for API documentation 

## Key Patterns & Architecture 

### 1. Module per Domain 
Each business domain has its own module with:
- Controller for HTTP endpoints 
- Service for business logic 
- Separate `.request.ts` and `.response.ts` files 

### 2. Entity-First DTO Pattern 
- Custom entity interfaces defined in `common/entities/` (not using Prisma types directly) 
- Input DTOs implement entity interfaces with class-validator decorators 
- Output DTOs use TypeScript utility types (`Pick`, `Omit`, `Partial`) from entity interfaces 
- DTOs are module-specific in `modules/{domain}/models/` directories 
- Full Swagger documentation with `@ApiProperty` 

### 3. Service Layer Architecture 
- Business logic separated from controllers 
- One service per entity 
- Prisma ORM for data persistence 

### 4. Permission-Based Access Control 
- Organization-scoped permissions 
- Role-based access with `@RequirePermissions` 
- Session includes active organization context 

### Authentication 
- `auth-client.ts` - Better Auth client with organization plugin 
- Environment variables for API URLs and database connections 

## Implemented Structure 

```
src/
â”œâ”€â”€ modules/
â”‚   â”œâ”€â”€ [*]/
â”‚   â”‚   â”œâ”€â”€ models/           # specific DTOs 
â”‚   â”‚   â”‚   â”œâ”€â”€ *.request.ts  # input DTOs 
â”‚   â”‚   â”‚   â””â”€â”€ *.response.ts # output DTOs 
â”‚   â”‚   â”œâ”€â”€ *.service.ts   
â”‚   â”‚   â”œâ”€â”€ *.controller.ts
â”‚   â”‚   â””â”€â”€ *.module.ts
â”œâ”€â”€ common/
â”‚   â”œâ”€â”€ entities/            # Entity interfaces 
â”‚   â”‚   â”œâ”€â”€ [*].entity.ts
â”‚   â”œâ”€â”€ decorators/          # Custom decorators 
â”‚   â”œâ”€â”€ guards/              # Auth & permission guards 
â”‚   â”œâ”€â”€ interceptors/        # Response transformation 
â”‚   â”œâ”€â”€ utilities/           # Common utilities 
â”‚   â”œâ”€â”€ filters/             # Exception handling 
â”‚   â”œâ”€â”€ middlewares/         # Request processing 
â”‚   â”œâ”€â”€ types/               # Shared types 
â”‚   â”œâ”€â”€ prisma/              # Database service 
â”‚   â””â”€â”€ better-auth/         # Auth configuration 
â”œâ”€â”€ app.module.ts            # Main app module 
â””â”€â”€ main.ts                  # Application bootstrap 
```

## Integration Points 

### Database 
- PostgreSQL with Prisma migrations 
- UUID primary keys across all entities 
- Proper foreign key relationships and cascading 
- Entity interfaces abstract Prisma types for better maintainability 

### Authentication Flow 
- Better Auth handles session management 
- Organization context in sessions 
- Permission-based route protection 

## Development Guidelines 

### Code Standards 
- One module per main domain/route 
- Separate controllers for secondary routes 
- Entity interfaces in `common/entities/` (not direct Prisma types) 
- Input DTOs implement entity interfaces with class-validator 
- Output DTOs use TypeScript utility types from entities 
- Full Swagger documentation 

### File Naming Conventions 
- `.entity.ts` for entity interfaces in `common/entities/` 
- `.request.ts` for input DTOs (using entity interfaces) 
- `.response.ts` for output DTOs (using Pick/Omit from entities) 
- `.service.ts` for business logic 
- `.controller.ts` for HTTP endpoints 

### Entity-First Architecture 
- Define entity interfaces first in `common/entities/` 
- Use these entities for both input validation and output typing 
- Leverage TypeScript utility types (`Pick<Entity, 'field1' | 'field2'>`, `Omit<Entity, 'sensitiveField'>`) 
- Prisma models map to entity interfaces but don't expose Prisma types directly 
- Better separation of concerns and easier testing 

## Implementation Status Summary

**COMPLETED**:
- All entity interfaces created
- Entity-first DTO pattern implemented
- Auth module with Better Auth integration
- Organization module as example implementation
- Common utilities and interceptors
- Proper module structure
- Guards and decorators
- Service layer architecture
- Swagger documentation setup

ðŸŽ¯ **READY FOR DEVELOPMENT**:
- Additional business domain modules can be created following the organization module pattern
- All foundational architecture is in place
- Development can proceed with confidence following established 