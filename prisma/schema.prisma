// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Better Auth User Model
model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  password      String?
  signalId      String?   // OneSignal player ID for push notifications
  language      String?   @default("en") // User's preferred language (en, fa, etc.)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  sessions   Session[]
  accounts   Account[]
  members    Member[]
  invitations Invitation[] @relation("inviter")
  subscriptions Subscription[]
  creditPurchases CreditPurchase[]
  creditTransactions CreditTransaction[]
}

// Better Auth Session Model
model Session {
  id                  String   @id @default(uuid()) @db.Uuid
  userId              String   @db.Uuid
  token               String   @unique
  expiresAt           DateTime
  ipAddress           String?
  userAgent           String?
  activeOrganizationId String?  @db.Uuid
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganization  Organization? @relation(fields: [activeOrganizationId], references: [id], onDelete: SetNull)
}

// Better Auth Account Model for SSO
model Account {
  id                    String   @id @default(uuid()) @db.Uuid
  userId                String   @db.Uuid
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
}

// Better Auth Verification Model
model Verification {
  id         String   @id @default(uuid()) @db.Uuid
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Organization Plugin Models
model Organization {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  slug      String   @unique
  logo      String?
  wooCommerceUrl String?
  consumerKey String?
  consumerSecret String?
  metadata  Json?
  createdAt DateTime @default(now())
  
  companyName String?
  privateSecretKey String?
  publicSecretKey String?

  members     Member[]
  invitations Invitation[]
  teams       Team[]
  sessions    Session[]
  wooCommerceWebhooks  WooCommerceWebhook[]
  subscriptions Subscription[]
  creditPurchases CreditPurchase[]
  creditTransactions CreditTransaction[]
}

model Member {
  id             String       @id @default(uuid()) @db.Uuid
  userId         String       @db.Uuid
  organizationId String       @db.Uuid
  role           Role
  teamId         String?      @db.Uuid
  createdAt      DateTime     @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  team         Team?        @relation(fields: [teamId], references: [id], onDelete: SetNull)
}

model Invitation {
  id             String   @id @default(uuid()) @db.Uuid
  email          String
  inviterId      String   @db.Uuid
  organizationId String   @db.Uuid
  role           Role
  teamId         String?  @db.Uuid
  status         String   @default("pending")
  expiresAt      DateTime
  createdAt      DateTime @default(now())

  inviter      User         @relation("inviter", fields: [inviterId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  team         Team?        @relation(fields: [teamId], references: [id], onDelete: SetNull)
}

model Team {
  id             String   @id @default(uuid()) @db.Uuid
  name           String
  organizationId String   @db.Uuid
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members      Member[]
  invitations  Invitation[]
}


enum Role {
  OWNER
  EMPLOYEE
}

model WooCommerceWebhook {
  id                    String   @id @default(uuid()) @db.Uuid
  organizationId        String   @db.Uuid
  wooCommerceWebhookId  Int      @unique
  name                  String
  status                String
  topic                 String
  resource              String
  event                 String
  hooks                 Json?
  deliveryUrl           String
  secret                String
  dateCreated           DateTime
  dateModified          DateTime?
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@index([organizationId])
  @@index([topic])
  @@index([status])
}

// Subscription Management Models
model Subscription {
  id                    String              @id @default(uuid()) @db.Uuid
  userId                String              @db.Uuid
  organizationId        String              @db.Uuid
  revenueCatCustomerId  String
  plan                  SubscriptionPlan
  status                SubscriptionStatus
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  monthlyCredits        Int                 @default(0)
  usedMonthlyCredits    Int                 @default(0)
  purchasedCredits      Int                 @default(0)
  isActive              Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization      Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creditPurchases   CreditPurchase[]
  creditTransactions CreditTransaction[]

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([status])
  @@index([plan])
}

model CreditPackage {
  id                    String   @id @default(uuid()) @db.Uuid
  name                  String
  credits               Int
  price                 Int      // Price in cents
  currency              String   @default("USD")
  revenueCatProductId   String   @unique
  isActive              Boolean  @default(true)
  sortOrder             Int      @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  creditPurchases CreditPurchase[]

  @@index([isActive])
  @@index([sortOrder])
}

model CreditPurchase {
  id                      String         @id @default(uuid()) @db.Uuid
  userId                  String         @db.Uuid
  organizationId          String         @db.Uuid
  subscriptionId          String         @db.Uuid
  creditPackageId         String         @db.Uuid
  revenueCatTransactionId String         @unique
  credits                 Int
  price                   Int            // Price in cents
  currency                String         @default("USD")
  status                  PurchaseStatus
  purchasedAt             DateTime
  refundedAt              DateTime?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization  Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscription  Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  creditPackage CreditPackage @relation(fields: [creditPackageId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@index([subscriptionId])
  @@index([status])
  @@index([purchasedAt])
}

model CreditTransaction {
  id              String                @id @default(uuid()) @db.Uuid
  userId          String                @db.Uuid
  organizationId  String                @db.Uuid
  subscriptionId  String?               @db.Uuid
  type            CreditTransactionType
  amount          Int                   // Positive for add, negative for consume
  description     String
  metadata        Json?
  createdAt       DateTime              @default(now())

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([organizationId])
  @@index([subscriptionId])
  @@index([type])
  @@index([createdAt])
}

enum SubscriptionPlan {
  PRO
  AI
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  UNPAID
  PAUSED
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum CreditTransactionType {
  MONTHLY_ALLOCATION
  PURCHASED
  CONSUMED
  REFUNDED
  EXPIRED
}